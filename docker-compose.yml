version: '3.4'

services:
  coinbazaar.transfer.api:
    image: ${DOCKER_REGISTRY-}coinbazaartransferapi
    build:
      context: .
      dockerfile: CoinBazaar.Transfer.API/Dockerfile
    volumes:
     - ~/:/app
    depends_on:
      - node1.eventstore
      - node2.eventstore
      - node3.eventstore

  coinbazaar.wallet.api:
    image: ${DOCKER_REGISTRY-}coinbazaarwalletapi
    build:
      context: .
      dockerfile: CoinBazaar.Wallet.API/Dockerfile
    volumes:
     - ~/:/app

  coinbazaar.transfer.esconsumer.grpc:
    image: ${DOCKER_REGISTRY-}coinbazaartransferesconsumergrpc
    build:
      context: .
      dockerfile: CoinBazaar.Transfer.ESConsumer.gRPC/Dockerfile
    depends_on:
      - node1.eventstore
      - node2.eventstore
      - node3.eventstore
      - mongo

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    depends_on:
      - mongo

  eventstore.volumes-provisioner:
    image: "hasnat/volumes-provisioner"
    environment:
      PROVISION_DIRECTORIES: "1000:1000:0755:/tmp/certs"
    volumes:
      - "./certs:/tmp/certs"
    network_mode: "none"

  eventstore.setup:
    image: eventstore/es-gencert-cli:1.0.2
    entrypoint: bash
    user: "1000:1000"
    command: >
      -c "mkdir -p ./certs && cd /certs
      && es-gencert-cli create-ca
      && es-gencert-cli create-node -out ./node1 --dns-names node1.eventstore, localhost
      && es-gencert-cli create-node -out ./node2 --dns-names node2.eventstore, localhost
      && es-gencert-cli create-node -out ./node3 --dns-names node3.eventstore, localhost
      && find . -type f -print0 | xargs -0 chmod 666"
    container_name: eventstore.setup
    volumes:
      - ./certs:/certs
    depends_on:
      - eventstore.volumes-provisioner

  node1.eventstore: &template
    image: eventstore/eventstore:latest
    container_name: node1.eventstore
    env_file:
      - vars.env
    environment:
      - EVENTSTORE_EXT_HOST_ADVERTISE_AS=node1.eventstore
      - EVENTSTORE_INT_HOST_ADVERTISE_AS=node1.eventstore
      - EVENTSTORE_GOSSIP_SEED=node2.eventstore:2113,node3.eventstore:2113
      - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/certs/ca
      - EVENTSTORE_CERTIFICATE_FILE=/certs/node1/node.crt
      - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/certs/node1/node.key
      - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=2111
      - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=1111
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --insecure https://node1.eventstore:2113/health/live || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 24
    ports:
      - 1111:1113
      - 2111:2113
    volumes:
      - ./certs:/certs
    depends_on:
      - eventstore.setup
    restart: always

  node2.eventstore:
    <<: *template
    container_name: node2.eventstore
    env_file:
      - vars.env
    environment:
      - EVENTSTORE_EXT_HOST_ADVERTISE_AS=node2.eventstore
      - EVENTSTORE_INT_HOST_ADVERTISE_AS=node2.eventstore
      - EVENTSTORE_GOSSIP_SEED=node1.eventstore:2113,node3.eventstore:2113
      - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/certs/ca
      - EVENTSTORE_CERTIFICATE_FILE=/certs/node2/node.crt
      - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/certs/node2/node.key
      - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=2112
      - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=1112
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --insecure https://node2.eventstore:2113/health/live || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 24
    ports:
      - 1112:1113
      - 2112:2113

  node3.eventstore:
    <<: *template
    container_name: node3.eventstore
    env_file:
      - vars.env
    environment:
      - EVENTSTORE_EXT_HOST_ADVERTISE_AS=node3.eventstore
      - EVENTSTORE_INT_HOST_ADVERTISE_AS=node3.eventstore
      - EVENTSTORE_GOSSIP_SEED=node1.eventstore:2113,node2.eventstore:2113
      - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/certs/ca      
      - EVENTSTORE_CERTIFICATE_FILE=/certs/node3/node.crt
      - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/certs/node3/node.key
      - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=2113
      - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=1113
    healthcheck:
      test:
        [
            'CMD-SHELL',
            'curl --fail --insecure https://node3.eventstore:2113/health/live || exit 1',
        ]
      interval: 5s
      timeout: 5s
      retries: 24
    ports:
      - 1113:1113
      - 2113:2113

  #eventstore.db:
  #  image: eventstore/eventstore:latest
  #  environment:
  #    - EVENTSTORE_CLUSTER_SIZE=1
  #    - EVENTSTORE_RUN_PROJECTIONS=All
  #    - EVENTSTORE_START_STANDARD_PROJECTIONS=true
  #    - EVENTSTORE_EXT_TCP_PORT=1113
  #    - EVENTSTORE_HTTP_PORT=2113
  #    - EVENTSTORE_INSECURE=true
  #    - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
  #    - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
  #  ports:
  #    - "1113:1113"
  #    - "2113:2113"
  #  volumes:
  #    - type: volume
  #      source: eventstore-volume-data
  #      target: /var/lib/eventstore
  #    - type: volume
  #      source: eventstore-volume-logs
  #      target: /var/log/eventstore

volumes:
  eventstore-volume-data:
  eventstore-volume-logs:

